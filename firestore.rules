rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // USERS: Only the user can read/write their own document. Admins can read all users.
    match /users/{userId} {
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.is_admin == true
      );
      // Only the user can update their own doc, but cannot set or change is_admin
      allow update: if request.auth != null && request.auth.uid == userId &&
        !(('is_admin' in request.resource.data) && (request.resource.data.is_admin != resource.data.is_admin));
      // Only the user can create their own doc, and cannot set is_admin to true
      allow create: if request.auth != null && request.auth.uid == userId &&
        (!('is_admin' in request.resource.data) || request.resource.data.is_admin == false);

      // ADDRESSES: Only the owner can read/write their own addresses
      match /addresses/{addressId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
        allow create, update: if
          request.resource.data.keys().hasAll(['name', 'phone', 'flatNo', 'buildingName']) &&
          request.resource.data.name is string &&
          request.resource.data.phone is string &&
          request.resource.data.flatNo is string &&
          request.resource.data.buildingName is string &&
          (request.resource.data.landmark == null || request.resource.data.landmark is string);
      }

      // CART: Only the owner can read/write their own cart
      match /cart/{cartItemId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }

    // PRODUCTS: Anyone can read, only admins can write
    match /products/{productId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.is_admin == true;
    }

    // ORDERS: Users can only read/write their own orders. Admins can read/write all orders.
    match /orders/{orderId} {
      allow read, update, delete: if request.auth != null && (
        resource.data.user_id == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.is_admin == true
      );
      allow create: if request.auth != null && (
        request.resource.data.user_id == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.is_admin == true
      );
      // Field validation for create
      allow create: if request.resource.data.keys().hasAll(['user_id', 'address', 'total_amount', 'payment_status', 'created_at', 'items']) &&
        request.resource.data.user_id is string &&
        request.resource.data.address is string &&
        request.resource.data.total_amount is number &&
        request.resource.data.payment_status in ['paid', 'pending', 'failed'] &&
        request.resource.data.created_at is timestamp &&
        request.resource.data.items is list;
    }

    // NOTIFICATIONS: Users can only read/write their own notifications. Admins can read/write all notifications.
    match /notifications/{notificationId} {
      allow read, update, delete: if request.auth != null && (
        resource.data.user_id == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.is_admin == true
      );
      allow create: if request.auth != null && (
        request.resource.data.user_id == request.auth.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.is_admin == true
      );
      // Field validation for create
      allow create: if request.resource.data.keys().hasAll(['user_id', 'title', 'body', 'type', 'created_at']) &&
        request.resource.data.user_id is string &&
        request.resource.data.title is string &&
        request.resource.data.body is string &&
        request.resource.data.type is string &&
        request.resource.data.created_at is timestamp;
    }
  }
} 